---
- name: Update host local facts
  ansible.utils.update_fact:
    updates: "{{ host_fact_updates }}"
  vars:
    fact_basename: "{{ linux_ansible_local_fact_file | basename | regex_replace('\\.fact$', '') }}"
    host_fact_updates: "{{ dict((
      ansible_host_fact_updates | map(attribute='path') |
      map('regex_replace', '^ansible_local\\.' + fact_basename + '\\.|^ansible_local\\.', '') |
      map('regex_replace', '^(?!__linux_ansible_local_facts\\.)(.*)$', '__linux_ansible_local_facts.\\1')) |
      zip(ansible_host_fact_updates | map(attribute='value'))) |
      dict2items(key_name='path', value_name='value') }}"
  register: linux_ansible_update_local_facts

- name: Re-assign host local facts to ansible facts
  ansible.builtin.set_fact:
    __linux_ansible_local_facts: "{{ linux_ansible_update_local_facts.__linux_ansible_local_facts }}"
  register: linux_ansible_local_facts_reassign

- name: Settle local facts on host if changed
  become: true
  ansible.builtin.template:
    src: "{{ linux_ansible_local_fact_template }}"
    dest: "{{ linux_ansible_local_fact_file }}"
    backup: "{{ linux_ansible_local_fact_backup | default(omit) | bool }}"
  register: linux_ansible_local_facts_settle
  vars:
    fact_basename: "{{ linux_ansible_local_fact_file | basename | regex_replace('\\.fact$', '') }}"
    on_host: "{{ ansible_local[fact_basename] | default({}) | b64encode }}"
    on_runtime: "{{ __linux_ansible_local_facts | default({}) | b64encode }}"
  when: on_host != on_runtime

- name: Re-read local facts
  become: true
  ansible.builtin.setup:
    filter: ansible_local
  register: linux_ansible_local_facts_reread
  when: linux_ansible_local_facts_settle.changed

# - name: Settle local facts if they have been modified
#   ansible.builtin.meta: 'flush_handlers'