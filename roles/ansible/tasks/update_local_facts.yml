---
- name: Ensure ansible local facts directory exists on host
  become: true
  ansible.builtin.file:
    state: directory
    recurse: true
    path: "{{ ansible__local_facts_dir }}"
  register: ansible__ensure_local_facts_dir
  when:
    - ansible__role_enabled | bool
    - ansible__manage_local_facts | bool

- name: Update host local facts
  ansible.utils.update_fact:
    updates: "{{ local_fact_updates }}"
  vars:
    path_prefix: "ansible_local.{{ ansible__local_fact_name }}."
    update_paths: "{{ ansible__local_fact_updates | map(attribute='path') |
      map('regex_replace', '^(?!' + (path_prefix | regex_escape) + ')(.*)$', path_prefix + '\\1') }}"
    local_fact_updates: "{{ {'path': update_paths, 'value': (ansible__local_fact_updates | map(attribute='value'))} |
      aybarsm.helper.to_list_of_dicts }}"
  register: ansible__update_local_facts  
  when:
    - ansible__role_enabled | bool
    - ansible__manage_local_facts | bool
    - ansible__local_fact_updates | default([]) | length > 0
    - ansible_local[ansible__local_fact_name] is defined

- name: Settle updated local facts on the host
  become: true
  ansible.builtin.template:
    src: "{{ ansible__local_fact_template }}"
    dest: "{{ ansible__local_fact_file }}"
    backup: "{{ ansible__local_fact_backup | default(omit) | bool }}"
  register: ansible__settle_local_facts
  when:
    - ansible__role_enabled | bool
    - ansible__manage_local_facts | bool

- name: Re-read updated local facts on the host
  become: true
  ansible.builtin.setup:
    filter: ansible_local
  register: ansible__reread_local_facts
  when:
    - ansible__role_enabled | bool
    - ansible__manage_local_facts | bool
    - ansible__settle_local_facts.changed is defined
    - ansible__settle_local_facts.changed | bool