---
- name: Ensure ansible local facts directory exists on host
  become: true
  ansible.builtin.file:
    state: directory
    recurse: true
    path: "{{ ansible__local_facts_dir }}"
  register: ansible__ensure_local_facts_dir
  when:
    - ansible__role_enabled | bool
    - ansible__manage_local_facts | bool
    - ansible__local_fact_updates is defined
    - ansible__local_fact_updates | type_debug == 'dict'

- name: Settle updated local facts on the host
  become: true
  ansible.builtin.template:
    src: "{{ ansible__local_fact_template }}"
    dest: "{{ ansible__local_fact_file }}"
    backup: "{{ ansible__local_fact_backup | default(omit) | bool }}"
  vars:
    recurse_strategy: "{{ ansible__local_fact_combine_recursive | default(true) | bool }}"
    list_merge_strategy: "{{ ansible__local_fact_combine_list_merge | default('prepend') }}"
    host_local_facts: "{{ ansible_local[ansible__local_fact_name] | default({'init': now().utcnow().strftime('%Y-%m-%dT%H:%M:%S.%fZ')}) |
      combine(ansible__local_fact_updates, recursive=recurse_strategy, list_merge=list_merge_strategy) }}"
  register: ansible__settle_local_facts
  when:
    - ansible__role_enabled | bool
    - ansible__manage_local_facts | bool
    - ansible__local_fact_updates is defined
    - ansible__local_fact_updates | type_debug == 'dict'

- name: Re-read updated local facts on the host
  become: true
  ansible.builtin.setup:
    filter: ansible_local
  register: ansible__reread_local_facts
  when:
    - ansible__role_enabled | bool
    - ansible__manage_local_facts | bool
    - ansible__settle_local_facts.changed is defined
    - ansible__settle_local_facts.changed | bool