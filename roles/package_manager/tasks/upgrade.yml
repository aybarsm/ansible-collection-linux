---
- name: Perform upgrade with rescue options
  block:
    - name: Find repo list files (Clean Upgrade)
      become: true
      ansible.builtin.find:
        paths: "{{ package_manager__repo_list_dir }}"
        patterns: "{{ package_manager__repo_list_patterns }}"
        use_regex: "{{ package_manager__repo_list_use_regex | bool }}"
      register: package_manager__upgrade_clean_find_repo_list_files
      when:
        - __package_manager__upgrade_clean | default(false) | bool

    - name: Deploy default repo lists by copy with backups (Clean Upgrade)
      become: true
      ansible.builtin.copy:
        src: "{{ item.src }}"
        dest: "{{ item.dest }}"
        backup: true
      loop: "{{ __package_manager__repo_list_defaults_copy }}"
      register: package_manager__upgrade_clean_default_repo_list_copies
      notify: "package_manager__update_repo_cache"
      when: 
        - __package_manager__upgrade_clean | default(false) | bool
        - __package_manager__repo_list_defaults_copy | length > 0

    - name: Deploy default repo lists by template with backups (Clean Upgrade)
      become: true
      ansible.builtin.template:
        src: "{{ item.src }}"
        dest: "{{ item.dest }}"
        backup: true
      loop: "{{ repo_list_templates }}"
      vars:
        repo_lists_default: "{{ __package_manager__repo_list_defaults_template | default([]) }}"
        repo_list_additonals_src: "{{ package_manager__upgrade_clean_find_repo_list_files.files | map(attribute='path') | default([]) }}"
        repo_lists_additional: "{{ (repo_list_additonals_src | length > 0) |
          ternary(
          {'dest': repo_list_additonals_src} | aybarsm.helper.to_list_of_dicts(defaults={'src': package_manager__repo_list_disabled_template}),
          []) |
          rejectattr('dest', 'in', (__package_manager__repo_list_defaults | map(attribute='dest'))) }}"
        repo_list_templates: "{{ repo_lists_default + repo_lists_additional }}"
      register: package_manager__upgrade_clean_default_repo_list_templates
      notify: "package_manager__update_repo_cache"
      when:
        - __package_manager__upgrade_clean | default(false) | bool
        - repo_list_templates | length > 0

    - name: Update package manager cache after repo list changes (Clean Upgrade)
      ansible.builtin.meta: 'flush_handlers'
      when: package_manager__upgrade_clean_default_repo_list_copies.changed or package_manager__upgrade_clean_default_repo_list_templates.changed
      
    - name: Perform DEB package upgrade via APT
      become: true
      ansible.builtin.apt:
        update_cache: "{{ update_repo_cache }}"
        upgrade: "{{ __package_manager__upgrade_mode }}"
        dpkg_options: "{{ package_manager__upgrade_dpkg_options | default(omit) }}"
      register: package_manager__upgrade_deb
      vars:
        handler_triggered: "{{ package_manager__upgrade_clean_default_repo_list_copies.changed or package_manager__upgrade_clean_default_repo_list_templates.changed }}"
        update_repo_cache: "{{ false if handler_triggered else package_manager__upgrade_update_repo_cache }}"
      when:
        - ansible_os_family | lower == 'debian'

    - name: Clean RPM repo metadata cache before upgrade, if not already via clean upgrade
      become: true
      ansible.builtin.command:
        cmd: yum clean metadata
      vars:
        handler_triggered: "{{ package_manager__upgrade_clean_default_repo_list_copies.changed or package_manager__upgrade_clean_default_repo_list_templates.changed }}"
        update_repo_cache: "{{ false if handler_triggered else package_manager__upgrade_update_repo_cache }}"
      register: package_manager__rpm_upgrade_clean_cache_pre
      when:
        - ansible_os_family | lower == 'redhat'
        - update_repo_cache

    - name: Perform RPM package upgrade via DNF
      become: true
      ansible.builtin.dnf:
        name: "*"
        state: latest
      register: package_manager__rpm_upgrade
      when: ansible_os_family | lower == 'redhat'

    - name: Include update local facts tasks
      ansible.builtin.include_role:
        name: aybarsm.linux.ansible
        tasks_from: update_local_facts.yml
      vars:
        ansible__local_fact_updates:
          package_manager:
            upgrade: ["{{ now().utcnow().strftime('%Y-%m-%dT%H:%M:%S.%fZ') }}"]
      when:
        - __package_manager__upgrade_once
        - package_manager__upgrade_deb.success or package_manager__rpm_upgrade.success
  rescue:
      - name: Inform when errors
        ansible.builtin.debug:
          msg: 'Upgrade process failed. Any changes will be reverted back.'
  always:
    - name: Restore (copy) repo list files and directory (Clean Upgrade)
      become: true
      ansible.builtin.copy:
        src: "{{ item.src }}"
        dest: "{{ item.dest }}"
        remote_src: true
        backup: false
      loop: "{{ restore_files }}"
      vars:
        repo_list_copies: "{{ package_manager__upgrade_clean_default_repo_list_copies.results | default([]) |
          selectattr('backup_file', 'defined') | selectattr('dest', 'defined') }}"
        repo_list_templates: "{{ package_manager__upgrade_clean_default_repo_list_templates.results | default([]) |
          selectattr('backup_file', 'defined') | selectattr('dest', 'defined') }}"
        restore_src: "{{ (repo_list_copies | map(attribute='backup_file') | default([])) + (repo_list_templates | map(attribute='backup_file') | default([])) }}"
        restore_dest: "{{ (repo_list_copies | map(attribute='dest') | default([])) + (repo_list_templates | map(attribute='dest') | default([])) }}"
        restore_files: "{{ (restore_src | length > 0) |
          ternary(
            {'src': restore_src, 'dest': restore_dest} | aybarsm.helper.to_list_of_dicts,
            []
          ) }}"
      register: package_manager__upgrade_clean_restore_repo_lists
      notify: "package_manager__update_repo_cache"
      when:
        - __package_manager__upgrade_clean | default(false) | bool
        - restore_files | length > 0

    - name: Remove backup repo list files (Clean Upgrade)
      become: true
      ansible.builtin.file:
        path: "{{ item }}"
        state: absent
      loop: "{{ package_manager__upgrade_clean_restore_repo_lists.results | map(attribute='src') }}"
      register: package_manager__upgrade_clean_remove_backup_repo_lists
      when:
        - __package_manager__upgrade_clean | default(false) | bool
        - package_manager__clean_upgrade_post_remove_backups | default(false) | bool
        - package_manager__upgrade_clean_restore_repo_lists.results | default([]) | length > 0

    - name: Update package manager cache after repo list changes (Clean Upgrade)
      ansible.builtin.meta: 'flush_handlers'
      when: package_manager__upgrade_clean_restore_repo_lists.changed
