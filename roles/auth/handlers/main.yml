---
- name: Effect systemd service for ssh changes
  become: true
  ansible.builtin.systemd_service:
    daemon_reexec: "{{ service.daemon_reexec | default(omit) | bool }}"
    daemon_reload: "{{ service.daemon_reload | default(omit) | bool }}"
    enabled: "{{ service.enabled | default(omit) | bool }}"
    force: "{{ service.force | default(omit) | bool }}"
    masked: "{{ service.masked | default(omit) | bool }}"
    name: "{{ service.name | default('ssh.service') }}"
    no_block : "{{ service.no_block | default(omit) | bool }}"
    scope: "{{ service.scope | default(omit) }}"
    state: "{{ service.state | default(omit) }}"
  vars:
    service: "{{ auth__ssh_changes_strategy | aybarsm.helper.replace_aliases(__ansible__config.modules.ansible.builtin.systemd_service.aliases) }}"
  register: auth__ssh_apply_changes_systemd_service
  listen: "auth__ssh_apply_changes"
  when:
    - auth__ssh_changes_strategy.module is defined
    - auth__ssh_changes_strategy.module == 'systemd_service'

- name: Effect service for ssh changes
  become: true
  ansible.builtin.service:
    arguments: "{{ service.arguments | default(omit) }}"
    enabled: "{{ service.enabled | default(omit) }}"
    name: "{{ service.name | default('ssh.service') }}"
    pattern: "{{ service.pattern | default(omit) }}"
    runlevel: "{{ service.runlevel | default(omit) }}"
    sleep: "{{ service.sleep | default(omit) }}"
    state: "{{ service.state | default(omit) }}"
    use: "{{ service.use | default(omit) }}"
  vars:
    service: "{{ auth__ssh_changes_strategy | aybarsm.helper.replace_aliases(__ansible__config.modules.ansible.builtin.service.aliases) }}"
  register: auth__ssh_apply_changes_service
  listen: "auth__ssh_apply_changes"
  when:
    - auth__ssh_changes_strategy.module is defined
    - auth__ssh_changes_strategy.module == 'service'